/*
 * Copyright (c) 2012 Patrick Meyer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.itemanalysis.jmetrik.selector;

import com.itemanalysis.jmetrik.model.VariableListFilter;
import com.itemanalysis.jmetrik.model.VariableListModel;
import com.itemanalysis.jmetrik.workspace.VariableChangeEvent;
import com.itemanalysis.jmetrik.workspace.VariableChangeListener;
import com.itemanalysis.jmetrik.workspace.VariableChangeType;
import com.itemanalysis.psychometrics.data.VariableInfo;
import com.itemanalysis.psychometrics.data.VariableType;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;

public class SingleSelectionPanel extends JPanel implements VariableChangeListener{

    // Variables declaration - do not modify
    private JButton button1;
    private JButton button2;
    private JButton button3;
    private JButton button4;
    private JList unselectedVariableList;
    private JTextField selectedVariableField;
    private JButton selectButton;
    private JScrollPane unselectedVariablePane;
    private VariableListModel unselectedListModel;
    private VariableListFilter unselectedVariableFilter;
    private VariableListFilter selectedVariableFilter;
    private VariableInfo selectedVariable;

    /**
     * If true, variables moved from unselectedVariableList to selectedList.
     * If false, variables moved from selectedList to unselectedVariableList.
     */
    private boolean selectVariables = true;

    // End of variables declaration

    /** Creates new form SingleSelectionPanel */
    public SingleSelectionPanel() {

        //create list filter and list model
        unselectedVariableFilter = new VariableListFilter();
        unselectedListModel = new VariableListModel(unselectedVariableFilter);

        //create list filter and list model
        selectedVariableFilter = new VariableListFilter();

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        unselectedVariablePane = new JScrollPane();
        unselectedVariableList = new JList();
        unselectedVariableList.setName("unselectedVariableList");
        unselectedVariableList.addFocusListener(new ListFocusListener());
        selectedVariableField = new JTextField();
        selectedVariableField.setName("selectedVariableField");
        selectedVariableField.addFocusListener(new ListFocusListener());
        selectButton = new JButton();
        button1 = new JButton();
        button2 = new JButton();
        button3 = new JButton();
        button4 = new JButton();

        setMinimumSize(new Dimension(400, 272));
        setPreferredSize(new Dimension(400, 272));

        unselectedVariablePane.setMinimumSize(new Dimension(125, 250));
        unselectedVariablePane.setPreferredSize(new Dimension(125, 250));

        unselectedVariableList.setModel(unselectedListModel);
        unselectedVariableList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        unselectedVariablePane.setViewportView(unselectedVariableList);

        selectedVariableField.setMinimumSize(new Dimension(125, 28));
        selectedVariableField.setPreferredSize(new Dimension(125, 28));

        selectButton.setText(">");
        selectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if(selectVariables){

                    //move selected variable to selectedList
                    int selected = unselectedVariableList.getSelectedIndex();
                    selectedVariable = unselectedListModel.getElementAt(selected);
                    if(selectedVariableFilter.passThroughFilter(selectedVariable)){
                        selectedVariableField.setText(selectedVariable.getName().toString());
                        unselectedListModel.removeElement(selectedVariable);
                        unselectedVariableList.clearSelection();
                    }else{
                        selectedVariable = null;
                    }

                }else{
                    //move selectedVariables to unselected list
                    if(selectedVariable!=null){
                        unselectedListModel.addElement(selectedVariable);
                        selectedVariable=null;
                        selectedVariableField.setText("");
                    }
                }
            }
        });
//        selectButton.setMaximumSize(new Dimension(49, 25));
//        selectButton.setMinimumSize(new Dimension(49, 25));
//        selectButton.setPreferredSize(new Dimension(49, 25));

        button1.setText("B1");
//        button1.setMaximumSize(new Dimension(69, 25));
//        button1.setMinimumSize(new Dimension(69, 25));
//        button1.setPreferredSize(new Dimension(69, 25));

        button2.setText("B2");
//        button2.setMaximumSize(new Dimension(69, 25));
//        button2.setMinimumSize(new Dimension(69, 25));
//        button2.setPreferredSize(new Dimension(69, 25));

        button3.setText("B3");
//        button3.setMaximumSize(new Dimension(69, 25));
//        button3.setMinimumSize(new Dimension(69, 25));
//        button3.setPreferredSize(new Dimension(69, 25));

        button4.setText("B4");
//        button4.setMaximumSize(new Dimension(69, 25));
//        button4.setMinimumSize(new Dimension(69, 25));
//        button4.setPreferredSize(new Dimension(69, 25));

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(unselectedVariablePane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, 49)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectedVariableField, GroupLayout.PREFERRED_SIZE, 122, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(button2, GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                        .addComponent(button1, GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                        .addComponent(button3, GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                        .addComponent(button4, GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(selectButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(selectedVariableField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                                .addGap(2, 2, 2))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(button1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(2, 2, 2)))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(button2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(button3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(button4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(unselectedVariablePane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>

    public void setVariables(ArrayList<VariableInfo> variables){
        reset();
        unselectedListModel.clear();

        for(VariableInfo v : variables){
            unselectedListModel.addElement(v);
        }
    }

    public void reset(){
        if(selectedVariable!=null){
            unselectedListModel.addElement(selectedVariable);
            selectedVariable = null;
        }
        selectedVariableField.setText("");
        selectButton.setEnabled(true);
    }

    public void addUnselectedFilterType(VariableType t){
        unselectedVariableFilter.addFilteredType(t);
    }

    public void addSelectedFilterType(VariableType t){
        selectedVariableFilter.addFilteredType(t);
    }

    public JButton getButton1(){
        return button1;
    }

    public JButton getButton2(){
        return button2;
    }

    public JButton getButton3(){
        return button3;
    }

    public JButton getButton4(){
        return button4;
    }

    public void showButton1(boolean show){
        button1.setVisible(show);
    }

    public void showButton2(boolean show){
        button2.setVisible(show);
    }

    public void showButton3(boolean show){
        button3.setVisible(show);
    }

    public void showButton4(boolean show){
        button4.setVisible(show);
    }

    public boolean selectionMade(){
        return selectedVariable!=null;
    }

    /**
     *
     * @return array of selected variables.
     */
    public VariableInfo getSelectedVariables(){
        return selectedVariable;
    }

    public VariableChangeListener getVariableChangedListener(){
        return this;
    }

    public void variableChanged(VariableChangeEvent e){

        if(e.getChangeType()== VariableChangeType.VARIABLE_DELETED){
            VariableInfo varInfo = e.getVariable();
            unselectedListModel.removeElement(varInfo);
            if(selectedVariable!=null && selectedVariable.equals(varInfo)){
                selectedVariable=null;
            }
        }else if(e.getChangeType()==VariableChangeType.VARIABLE_ADDED){
            VariableInfo varInfo = e.getVariable();
            unselectedListModel.addElement(varInfo);
        }else if(e.getChangeType()==VariableChangeType.VARIABLE_MODIFIED){
            VariableInfo varInfo = e.getVariable();
            //do not use selectedListModel.replaceElement(v) because of need to filter variable
            if(selectedVariable!=null && selectedVariable.equals(varInfo)){
                if(selectedVariableFilter.passThroughFilter(selectedVariable)){
                    selectedVariable=varInfo;
                }else{
                    unselectedListModel.addElement(varInfo);//force filtering
                }
            }else{
                if(unselectedListModel.contains(varInfo)){
                    //do not use variableListModel.replaceElement(v) because of need to filter variable
                    unselectedListModel.removeElement(varInfo);
                    unselectedListModel.addElement(varInfo); //will force filtering of modified variable
                }
            }
        }else if(e.getChangeType()==VariableChangeType.VARIABLE_RENAMED){
            VariableInfo oldVariable = e.getOldVariable();
            //do not use selectedListModel.replaceElement(v) because of need to filter variable
            if(selectedVariable!=null && selectedVariable.equals(oldVariable)){
                if(selectedVariableFilter.passThroughFilter(selectedVariable)){
                    selectedVariable=e.getVariable();
                }else{
                    unselectedListModel.addElement(e.getVariable());//force filtering
                }
            }else{
                if(unselectedListModel.contains(oldVariable)){
                    //do not use variableListModel.replaceElement(v) because of need to filter variable
                    unselectedListModel.removeElement(oldVariable);
                    unselectedListModel.addElement(e.getVariable()); //will force filtering of modified variable
                }
            }
        }
    }

    public void setUnselectedListCellRenderer(DefaultListCellRenderer renderer){
        unselectedVariableList.setCellRenderer(renderer);
    }

    public class ListFocusListener implements FocusListener {

        public void focusGained(FocusEvent e){
            String compName = e.getComponent().getName();
            if(compName!=null){
                if("unselectedVariableList".equals(compName)){
                    if(selectedVariable!=null) selectButton.setEnabled(false);
                    selectButton.setText(">");
                    selectButton.setToolTipText("Select variable");
                    selectVariables = true;
                }

                if("selectedVariableField".equals(compName)){
                    selectButton.setEnabled(true);
                    selectButton.setText("<");
                    selectButton.setToolTipText("Deselect variable");
                    selectedVariableField.selectAll();
                    selectVariables = false;
                }

            }
        }

        public void focusLost(FocusEvent e){
            //do nothing
        }
    }
    
    
}
